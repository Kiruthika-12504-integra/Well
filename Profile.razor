@* @page "/profile"
@inject IJSRuntime JS
@inject UserSessionService UserSessionService
@using System.Text.Json
@using BlazorApp2.Components.Layout
@layout MainLayout

<h3 class="mt-4 text-center">ðŸ‘¤ My Profile</h3>

@if (!UserSessionService.IsLoggedIn)
{
    <div class="alert alert-danger mt-4 text-center">
        Please log in to view your profile.
    </div>
}
else
{
    <div class="container mt-4">
        <EditForm Model="@profile" OnValidSubmit="SaveProfile">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Full Name</label>
                <InputText class="form-control" @bind-Value="profile.FullName" />
            </div>

            <div class="mb-3">
                <label class="form-label">Age</label>
                <InputNumber class="form-control" @bind-Value="profile.Age" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email</label>
                <InputText class="form-control" @bind-Value="profile.Email" />
            </div>

            <div class="mb-3">
                <label class="form-label">Bio</label>
                <InputTextArea class="form-control" @bind-Value="profile.Bio" />
            </div>

            <button type="submit" class="btn btn-primary">ðŸ’¾ Save Profile</button>
        </EditForm>

        @if (saved)
        {
            <div class="alert alert-success mt-3">Profile saved successfully!</div>
        }
    </div>
}

@code {
    private UserProfile profile = new();
    private bool saved = false;

    protected override async Task OnInitializedAsync()
{
    if (!UserSessionService.IsLoggedIn)
    {
        await UserSessionService.LoadUserAsync(); // âœ… Restore session
    }

    if (UserSessionService.IsLoggedIn)
    {
        var key = $"profile-{UserSessionService.CurrentUsername}";
        var json = await JS.InvokeAsync<string>("localStorage.getItem", key);

        if (!string.IsNullOrEmpty(json))
        {
            var stored = JsonSerializer.Deserialize<UserProfile>(json);
            if (stored != null)
            {
                profile = stored;
            }
        }
    }
}


    private async Task SaveProfile()
    {
        var key = $"profile-{UserSessionService.CurrentUsername}";
        var json = JsonSerializer.Serialize(profile);
        await JS.InvokeVoidAsync("localStorage.setItem", key, json);
        saved = true;
    }

    public class UserProfile
    {
        public string FullName { get; set; } = "";
        public int Age { get; set; }
        public string Email { get; set; } = "";
        public string Bio { get; set; } = "";
    }
} *@
