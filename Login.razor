@page "/"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@inject IJSRuntime JS
@inject NavigationManager NavigationManager
@inject UserSessionService UserSession


<div class="login-container">
    <div class="login-card shadow p-4 rounded-3">
        <h2 class="text-center mb-2">üåø Wellness Tracker</h2>
              <div class="mt-4 text-center">
                <div class="form-check form-switch d-flex align-items-center justify-content-center">
                    <input class="form-check-input" type="checkbox" role="switch" id="modeSwitch" @bind="isLoginMode" />
                    <label class="form-check-label ms-2" for="modeSwitch">
                        @((isLoginMode ? "Switch to Sign Up" : "Switch to Log In"))
                    </label>
                </div>
            </div>
        <p class="text-center text-muted">@((isLoginMode ? "Log in to continue your journey" :  "Create a new account"))</p>

        <EditForm Model="@formModel" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />

    
            <div class="mb-3">
                <label class="form-label">üë§ Username</label>
                <InputText class="form-control" @bind-Value="formModel.Username" placeholder="Enter username" />
                <ValidationMessage For="@(() => formModel.Username)" />
            </div>

            <div class="mb-3">
                <label class="form-label">üîí Password</label>
                <InputText class="form-control" type="password" @bind-Value="formModel.Password" placeholder="Enter password" />
                <ValidationMessage For="@(() => formModel.Password)" />
            </div>

            <button class="btn btn-success w-100" type="submit">
                @(isLoginMode ? "üíú Log In" : "üìù Sign Up")
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="mt-3 text-center">
                <p class="validation-message">@Message</p>
            </div>
        }

  
    </div>
</div>

<style>
    .login-container {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(to bottom right, #e0f7fa, #fff3e0);
    }

    .login-card {
        background-color: #ffffff;
        max-width: 400px;
        width: 100%;
    }

    .form-label {
        font-weight: 600;
    }

    .validation-message {
        color: #e74c3c;
        font-weight: bold;
    }
</style>

@code {
    private bool isLoginMode = true;
    private AuthModel formModel = new();
    private string Message = string.Empty;

    private async Task HandleSubmit()
{
    var json = await JS.InvokeAsync<string>("localStorage.getItem", "users");
    var users = string.IsNullOrWhiteSpace(json)
        ? new List<User>()
        : System.Text.Json.JsonSerializer.Deserialize<List<User>>(json);

    if (isLoginMode)
    {
        var match = users.FirstOrDefault(u =>
            u.Username == formModel.Username && u.Password == formModel.Password);

        if (match is not null)
{
    UserSession.SetUser(match.Username); // Track the current user
    NavigationManager.NavigateTo("/home");
}

        else
        {
            Message = "‚ùå Incorrect username or password.";
        }
    }
    else // Signup mode
    {
        if (users.Any(u => u.Username == formModel.Username))
        {
            Message = "‚ö†Ô∏è Username already exists.";
            return;
        }

        users.Add(new User { Username = formModel.Username, Password = formModel.Password });
        var updatedJson = System.Text.Json.JsonSerializer.Serialize(users);
        await JS.InvokeVoidAsync("localStorage.setItem", "users", updatedJson);

        // ‚úÖ Switch to login mode after signup
        isLoginMode = true;
        formModel = new AuthModel();
        Message = "‚úÖ Signup successful! Please log in.";
    }
}



    public class AuthModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }

    public class User
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}
